{"ast":null,"code":"var _jsxFileName = \"/home/rohan/Github Projects/memory-game/src/components/Cards.js\";\nimport React, { useEffect, useState } from \"react\";\nimport Modal from \"./Modal\";\nimport Pics from \"./Pics\";\nimport Scores from \"./Scores\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Cards() {\n  const [loading, setLoading] = useState(true);\n  const [picsArrived, setPicsArrived] = useState(false);\n  const [Error, setError] = useState(false);\n  let [ExampleArr, setExampleArr] = useState([]);\n  const [modal, setModal] = useState(false);\n  const [score, setScore] = useState(0);\n  const [highScore, setHighScore] = useState(0);\n  let ArrTotal = [];\n  let [splicedArr, setSplicedArr] = useState([]);\n  let start = 0;\n  let end = 12;\n  useEffect(() => {\n    fetch(\"https://api.pexels.com/v1/search/?page=1&per_page=80&query=flower\", {\n      headers: {\n        Authorization: \"563492ad6f917000010000010bbc2cb4ac214d6d8ecd66c450d9526c\"\n      }\n    }).then(resp => {\n      if (!resp.ok) {\n        throw Error(\"Could not fetch data for that resource\");\n      }\n\n      return resp.json();\n    }).then(data => {\n      console.log(data);\n      ArrTotal = data.photos;\n      splicedArr = ArrTotal.splice(start, end);\n      setSplicedArr(splicedArr);\n      console.log(splicedArr.length);\n      setPicsArrived(true);\n      setLoading(false);\n      console.log(\"use effect used\");\n    }).catch(e => {\n      console.log(e.message);\n      setLoading(false);\n      setError(true);\n    });\n  }, []);\n  let checkArr = [];\n  let arrToReplace = [];\n  useEffect(() => {\n    checkArr = [];\n    arrToReplace = [];\n    console.log(\"USE EFFECT\");\n  }, [splicedArr]);\n\n  function CheckUnique(index) {\n    if (checkArr.indexOf(index) === -1) {\n      checkArr.push(index);\n      return splicedArr[index];\n    } else {\n      let index = Math.floor(splicedArr.length * Math.random());\n      let elseVal = CheckUnique(index);\n      return elseVal;\n    }\n  }\n\n  function CurrentPic(e) {\n    let checkId = e.target.parentNode.parentNode.id;\n\n    if (ExampleArr.indexOf(checkId) === -1) {\n      ExampleArr.push(checkId);\n      setScore(score + 1);\n    } else {\n      setModal(true);\n    }\n\n    if (ExampleArr.length === splicedArr.length) {}\n  }\n\n  function ModalBtn() {\n    setExampleArr([]);\n    setScore(0);\n    setModal(false);\n\n    if (score > highScore) {\n      setHighScore(score);\n    } else {\n      console.log(\"Better beat the high score nest time\");\n    }\n  }\n\n  function changeOrder() {\n    for (let i = 0; i < splicedArr.length; i++) {\n      let index = Math.floor(splicedArr.length * Math.random());\n      console.log(index);\n\n      if (checkArr.length > splicedArr.length) {\n        break;\n      }\n\n      let uniqueArr = CheckUnique(index);\n      arrToReplace.push(uniqueArr);\n    }\n\n    splicedArr = arrToReplace;\n    console.log(arrToReplace);\n    setSplicedArr(splicedArr);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Scores, {\n      Score: score,\n      HighScore: highScore\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), modal && /*#__PURE__*/_jsxDEV(Modal, {\n      handler: ModalBtn\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 17\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"loadingHead\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 19\n    }, this), picsArrived && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"CardsRendered\",\n      children: /*#__PURE__*/_jsxDEV(Pics, {\n        arr: splicedArr,\n        changeOrder: changeOrder,\n        checkPic: CurrentPic\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }, this), Error && /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"loadingHead\",\n      children: \"Error...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n}\n\nexport default Cards;","map":{"version":3,"sources":["/home/rohan/Github Projects/memory-game/src/components/Cards.js"],"names":["React","useEffect","useState","Modal","Pics","Scores","Cards","loading","setLoading","picsArrived","setPicsArrived","Error","setError","ExampleArr","setExampleArr","modal","setModal","score","setScore","highScore","setHighScore","ArrTotal","splicedArr","setSplicedArr","start","end","fetch","headers","Authorization","then","resp","ok","json","data","console","log","photos","splice","length","catch","e","message","checkArr","arrToReplace","CheckUnique","index","indexOf","push","Math","floor","random","elseVal","CurrentPic","checkId","target","parentNode","id","ModalBtn","changeOrder","i","uniqueArr"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Modal from \"./Modal\";\nimport Pics from \"./Pics\";\nimport Scores from \"./Scores\";\n\nfunction Cards() {\n  const [loading, setLoading] = useState(true);\n  const [picsArrived, setPicsArrived] = useState(false);\n  const [Error, setError] = useState(false);\n  let [ExampleArr, setExampleArr] = useState([]);\n  const [modal, setModal] = useState(false);\n  const [score, setScore] = useState(0);\n  const [highScore, setHighScore] = useState(0);\n\n  let ArrTotal = [];\n  let [splicedArr, setSplicedArr] = useState([]);\n\n  let start = 0;\n  let end = 12;\n\n  useEffect(() => {\n    fetch(\"https://api.pexels.com/v1/search/?page=1&per_page=80&query=flower\", {\n      headers: {\n        Authorization:\n          \"563492ad6f917000010000010bbc2cb4ac214d6d8ecd66c450d9526c\",\n      },\n    })\n      .then((resp) => {\n        if (!resp.ok) {\n          throw Error(\"Could not fetch data for that resource\");\n        }\n        return resp.json();\n      })\n      .then((data) => {\n        console.log(data);\n        ArrTotal = data.photos;\n        splicedArr = ArrTotal.splice(start, end);\n        setSplicedArr(splicedArr);\n        console.log(splicedArr.length);\n        setPicsArrived(true);\n        setLoading(false);\n        console.log(\"use effect used\");\n      })\n      .catch((e) => {\n        console.log(e.message);\n        setLoading(false);\n        setError(true);\n      });\n  }, []);\n\n  let checkArr = [];\n  let arrToReplace = [];\n\n  useEffect(() => {\n    checkArr = [];\n    arrToReplace = [];\n    console.log(\"USE EFFECT\");\n  }, [splicedArr]);\n\n  function CheckUnique(index) {\n    if (checkArr.indexOf(index) === -1) {\n      checkArr.push(index);\n      return splicedArr[index];\n    } else {\n      let index = Math.floor(splicedArr.length * Math.random());\n      let elseVal = CheckUnique(index);\n      return elseVal;\n    }\n  }\n\n  function CurrentPic(e) {\n    let checkId = e.target.parentNode.parentNode.id;\n    if (ExampleArr.indexOf(checkId) === -1) {\n      ExampleArr.push(checkId);\n      setScore(score + 1);\n    } else {\n      setModal(true);\n    }\n\n    if (ExampleArr.length === splicedArr.length) {\n    }\n  }\n\n  function ModalBtn() {\n    setExampleArr([]);\n    setScore(0);\n    setModal(false);\n    if (score > highScore) {\n      setHighScore(score);\n    } else {\n      console.log(\"Better beat the high score nest time\");\n    }\n  }\n\n  function changeOrder() {\n    for (let i = 0; i < splicedArr.length; i++) {\n      let index = Math.floor(splicedArr.length * Math.random());\n      console.log(index);\n      if (checkArr.length > splicedArr.length) {\n        break;\n      }\n      let uniqueArr = CheckUnique(index);\n      arrToReplace.push(uniqueArr);\n    }\n    splicedArr = arrToReplace;\n    console.log(arrToReplace);\n    setSplicedArr(splicedArr);\n  }\n  return (\n    <div className=\"container\">\n      <Scores Score={score} HighScore={highScore} />\n      {modal && <Modal handler={ModalBtn} />}\n      {loading && <h1 className=\"loadingHead\">Loading...</h1>}\n      {picsArrived && (\n        <div className=\"CardsRendered\">\n          <Pics\n            arr={splicedArr}\n            changeOrder={changeOrder}\n            checkPic={CurrentPic}\n          />\n        </div>\n      )}\n      {Error && <h1 className=\"loadingHead\">Error...</h1>}\n    </div>\n  );\n}\n\nexport default Cards;\n"]},"metadata":{},"sourceType":"module"}